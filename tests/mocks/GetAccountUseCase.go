// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/transaction-manager/internal/domain"
)

// GetAccountUseCase is an autogenerated mock type for the GetAccountUseCase type
type GetAccountUseCase struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx, accountID
func (_m *GetAccountUseCase) Run(ctx context.Context, accountID int64) (*domain.Account, error) {
	ret := _m.Called(ctx, accountID)

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.Account, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Account); ok {
		r0 = rf(ctx, accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGetAccountUseCase creates a new instance of GetAccountUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetAccountUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetAccountUseCase {
	mock := &GetAccountUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
