// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/transaction-manager/internal/domain"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: account
func (_m *AccountRepository) Create(account *domain.Account) (int64, error) {
	ret := _m.Called(account)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Account) (int64, error)); ok {
		return rf(account)
	}
	if rf, ok := ret.Get(0).(func(*domain.Account) int64); ok {
		r0 = rf(account)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*domain.Account) error); ok {
		r1 = rf(account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByDocumentNumber provides a mock function with given fields: documentNumber
func (_m *AccountRepository) FindByDocumentNumber(documentNumber string) (*domain.Account, error) {
	ret := _m.Called(documentNumber)

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Account, error)); ok {
		return rf(documentNumber)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Account); ok {
		r0 = rf(documentNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(documentNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: id
func (_m *AccountRepository) FindByID(id int64) (*domain.Account, error) {
	ret := _m.Called(id)

	var r0 *domain.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.Account, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.Account); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
