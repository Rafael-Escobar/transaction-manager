// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/transaction-manager/internal/domain"
)

// CreateAccountUseCase is an autogenerated mock type for the CreateAccountUseCase type
type CreateAccountUseCase struct {
	mock.Mock
}

// Run provides a mock function with given fields: ctx, account
func (_m *CreateAccountUseCase) Run(ctx context.Context, account *domain.Account) (int64, error) {
	ret := _m.Called(ctx, account)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) (int64, error)); ok {
		return rf(ctx, account)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) int64); ok {
		r0 = rf(ctx, account)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Account) error); ok {
		r1 = rf(ctx, account)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCreateAccountUseCase creates a new instance of CreateAccountUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateAccountUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateAccountUseCase {
	mock := &CreateAccountUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
