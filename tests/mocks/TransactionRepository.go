// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/transaction-manager/internal/domain"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: transaction
func (_m *TransactionRepository) Create(transaction *domain.Transaction) (int64, error) {
	ret := _m.Called(transaction)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Transaction) (int64, error)); ok {
		return rf(transaction)
	}
	if rf, ok := ret.Get(0).(func(*domain.Transaction) int64); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*domain.Transaction) error); ok {
		r1 = rf(transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
